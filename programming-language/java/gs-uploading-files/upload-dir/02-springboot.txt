Springboot 3.0/3.1


Trance Backend 


Observability
    Micrometer + Spring framework

    Springboot3 からはMicrometerに入った

    Micrometer Observation project
    Micrometer Tracing project

    example
        https://spring.io/blog/2022/10/12/observability-with-spring-boot-3
        https://github.com/micrometer-metrics/micrometer-samples

    
    MetrictsだけでなくTranceも同時に計測
    Observation.createNotStarted("doSth", registry)
        .lowCardinalityKeyValue("locale", "en-US")
        .highCardinalityKeyValue("global", "jp")

    
    @Observed(name="test", lowCardinalityKeyValues = {})
    public void method() {
        ...
    }

    Spring Securityによる処理のSpanが自動で作成される


    Trancer/ Backend
    Brave/Zipkin
    Brave/Wavefront
    OpenTelemetry/Zipkin
    OpenTelemetry/Wavefront
    OpenTelemetry/OTLP


    レスポンスタイムが異常に遅い区間がある
        trance IDがパップされていると追跡しやすい

    grafana -> metrics -> trace -> log

    demo -> github.com/making/observability-demo-2023


AOT & Native Support

    graalvm 
    springboot 3.0から正式に
    起動時間が早いのでinstance　0にして必要時に起動する

    GraalVM Native Support dependencies
        ./gradlew bootBuildImage
        ./mvnw -Pnative spring-boot:build-image

    
    reflect사용하기 위해서는
    메트릭스를 만들어야 한다.
        RuntimeHit

    
    github.com/making/native-***


    注意点
        起動時に環境別に変えることは諦める

    
3.1の話

service connection
    データベースの接続情報を抽象化
        spring.datasource.*プロパティから特設Beanを作成したことを抽象化など
    connectiondetailsインタフェース
        JdbcConnectionDetails
    

testcontainers Support
    디비사용 개발, 테스트를 편하게 

docker compose support
    디비사용 개발, 테스트를 편하게 


